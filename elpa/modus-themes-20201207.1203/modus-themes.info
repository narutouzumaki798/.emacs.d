This is modus-themes.info, produced by makeinfo version 6.7 from
modus-themes.texi.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Modus Themes: (modus-themes). Highly accessible themes (WCAG AAA).
END-INFO-DIR-ENTRY


File: modus-themes.info,  Node: Top,  Next: Overview,  Up: (dir)

Modus themes for GNU Emacs
**************************

This manual, written by Protesilaos Stavrou, describes the customization
options for the ‘modus-operandi’ and ‘modus-vivendi’ themes, and
provides every other piece of information pertinent to them.

   The documentation furnished herein corresponds to version 1.0.2,
released on 2020-12-06.  Any reference to a newer feature which does not
yet form part of the latest tagged commit, is explicitly marked as such.

   Copyright (C) 2020 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.

* Menu:

* Overview::
* Installation::
* Enable and load::
* Customization Options::
* Advanced customization (do-it-yourself)::
* Face coverage::
* Notes for individual packages::
* Contributing::
* Acknowledgements::
* Meta::
* External projects (ports)::
* GNU Free Documentation License::

— The Detailed Node Listing —

Overview

* How do the themes look like::
* Learn about the latest changes::

Installation

* Install from the archives::
* Install on GNU/Linux::

Install on GNU/Linux

* Debian 11 Bullseye::
* GNU Guix::

Enable and load

* Load automatically::
* Toggle between the themes on demand::
* Configure options prior to loading a theme::
* Sample configuration for use-package::

Customization Options

* Bold constructs::              Toggle bold constructs in code
* Slanted constructs::           Toggle slanted constructs (italics) in code
* Syntax styles::                Choose the overall aesthetic of code syntax
* No mixed fonts::               Toggle mixing of font families
* Link styles::                  Choose link color intensity for the text or underline, or no underline at all
* Command prompts::              Choose among plain, subtle, or intense prompts
* Mode line::                    Choose among plain, three-dimensional, or Moody-compliant styles
* Completion UIs::               Choose among standard, moderate, or opinionated looks
* Fringes::                      Choose among invisible, subtle, or intense fringe visibility
* Line highlighting::            Toggle intense style for current line highlighting
* Matching parentheses::         Choose between various styles for matching delimiters/parentheses
* Active region::                Choose between various styles for the active region
* Diffs::                        Choose among intense, desaturated, or text-only diffs
* Org mode blocks::              Choose among plain, grayscale, or rainbow styles
* Heading styles::               Choose among several styles, also per heading level
* Scaled headings::              Toggle scaling of headings
* Headings' font::               Toggle proportionately spaced fonts in headings

Scaled headings

* Scaled heading sizes::         Specify rate of increase for scaled headings

Advanced customization (do-it-yourself)

* Tweak faces (DIY)::            Declare your own face specs
* Font configs (DIY)::           Optimise for mixed typeface buffers
* Org user faces (DIY)::         Extend styles for org-mode keywords and priorities
* WCAG test (DIY)::              Apply the WCAG formula to color values of your choosing
* Load at time (DIY)::           Switch between the themes depending on the time of day

Face coverage

* Supported packages::           Full list of covered face groups
* Indirectly covered packages::

Notes for individual packages

* Note on company-mode overlay pop-up::
* Note for ERC escaped color sequences::
* Note for powerline or spaceline::
* Note on SHR colors::
* Note for Helm grep::
* Note on vc-annotate-background-mode::

Contributing

* Sources of the themes::
* Issues you can help with::
* Merge requests::               Legal considerations for code patches



File: modus-themes.info,  Node: Overview,  Next: Installation,  Prev: Top,  Up: Top

1 Overview
**********

The Modus themes are designed for accessible readability.  They conform
with the highest standard for color contrast between any given
combination of background and foreground values.  This corresponds to
the WCAG AAA standard, which specifies a minimum rate of distance in
relative luminance of 7:1.

   Modus Operandi (‘modus-operandi’) is a light theme, while Modus
Vivendi (‘modus-vivendi’) is dark.  Each theme’s color palette is
designed to meet the needs of the numerous interfaces that are possible
in the Emacs computing environment.

   The overarching objective of this project is to always offer
accessible color combinations.  There shall never be a compromise on
this principle.  If there arises an inescapable trade-off between
readability and stylistic considerations, we will always opt for the
former.

   To ensure that users have a consistently accessible experience, the
themes strive to achieve as close to full face coverage as possible (see
*note Face coverage::).

   Starting with version 0.12.0 and onwards, the themes are built into
GNU Emacs.

* Menu:

* How do the themes look like::
* Learn about the latest changes::


File: modus-themes.info,  Node: How do the themes look like,  Next: Learn about the latest changes,  Up: Overview

1.1 How do the themes look like
===============================

Check the web page with the screen shots
(https://protesilaos.com/modus-themes-pictures/).  There are lots of
scenarios on display that draw attention to details and important
aspects in the design of the themes.  They also showcase the numerous
customization options.

   *note Customization options: Customization Options.


File: modus-themes.info,  Node: Learn about the latest changes,  Prev: How do the themes look like,  Up: Overview

1.2 Learn about the latest changes
==================================

Please refer to the web page with the change log
(https://protesilaos.com/modus-themes-changelog).  It is comprehensive
and covers everything that goes into every tagged release of the themes.


File: modus-themes.info,  Node: Installation,  Next: Enable and load,  Prev: Overview,  Up: Top

2 Installation
**************

The Modus themes are distributed with Emacs starting with version 28.1.
On older versions of Emacs, they can be installed using Emacs’ package
manager or manually from their code repository.  There also exist
packages for distributions of GNU/Linux.

* Menu:

* Install from the archives::
* Install on GNU/Linux::


File: modus-themes.info,  Node: Install from the archives,  Next: Install on GNU/Linux,  Up: Installation

2.1 Install from the archives
=============================

The ‘modus-themes’ package is available from the GNU ELPA archive, which
is configured by default.

   Prior to querying any package archive, make sure to have updated the
index, with ‘M-x package-refresh-contents’.  Then all you need to do is
type ‘M-x package-install’ and specify the ‘modus-themes’.

   Note that older versions of the themes used to be distributed as
standalone packages.  This practice has been discontinued starting with
version 1.0.0 of this project.


File: modus-themes.info,  Node: Install on GNU/Linux,  Prev: Install from the archives,  Up: Installation

2.2 Install on GNU/Linux
========================

The themes are also available from the archives of some distributions of
GNU/Linux.  These should correspond to a tagged release rather than
building directly from the latest Git commit.  It all depends on the
distro’s packaging policies.

* Menu:

* Debian 11 Bullseye::
* GNU Guix::


File: modus-themes.info,  Node: Debian 11 Bullseye,  Next: GNU Guix,  Up: Install on GNU/Linux

2.2.1 Debian 11 Bullseye
------------------------

The two themes are distributed as a single package for Debian and its
derivatives.  Currently in the unstable and testing suites and should be
available in time for Debian 11 Bullseye (next stable).

   Get them with:

     sudo apt install elpa-modus-themes


File: modus-themes.info,  Node: GNU Guix,  Prev: Debian 11 Bullseye,  Up: Install on GNU/Linux

2.2.2 GNU Guix
--------------

Users of Guix can get the themes with this command:

     guix package -i emacs-modus-themes


File: modus-themes.info,  Node: Enable and load,  Next: Customization Options,  Prev: Installation,  Up: Top

3 Enable and load
*****************

This section documents how to load the theme of your choice and how to
further control its initialization.  It also includes some sample code
snippets that could help you in the task.

   Before you load a theme, it is necessary to enable the libraries:

     (require 'modus-themes)                 ; common code
     (require 'modus-operandi-theme)         ; light theme
     (require 'modus-vivendi-theme)          ; dark theme

   *note Sample configuration for use-package::.

* Menu:

* Load automatically::
* Toggle between the themes on demand::
* Configure options prior to loading a theme::
* Sample configuration for use-package::


File: modus-themes.info,  Node: Load automatically,  Next: Toggle between the themes on demand,  Up: Enable and load

3.1 Load automatically
======================

Once the libraries that define the themes are enabled, you can load a
theme with either of the following expressions:

     (load-theme 'modus-operandi t)          ; Light theme
     (load-theme 'modus-vivendi t)           ; Dark theme

   Make sure to remove any other theme that is being loaded, otherwise
you might run into unexpected issues.

   Note that you can always ‘M-x disable-theme’ and specify an item.
The command does exactly what its name suggests.  To deactivate all
enabled themes at once, in case you have multiple of them enabled, you
may evaluate the following expression:

     (mapc #'disable-theme custom-enabled-themes)


File: modus-themes.info,  Node: Toggle between the themes on demand,  Next: Configure options prior to loading a theme,  Prev: Load automatically,  Up: Enable and load

3.2 Toggle between the themes on demand
=======================================

The themes provide the ‘modus-themes-toggle’ command that you can bind
to a key of your preference.  For example:

     (global-set-key (kbd "<f5>") #'modus-themes-toggle)

   What this toggle does is check if either ‘modus-operandi’ or
‘modus-vivendi’ is active and proceeds to cycle between them.  If none
of them are active, a minibuffer prompt will ask the user to choose
between the two.  In this latter scenario, all other themes will first
be disabled (using the ‘disable-theme’ we covered before).  Lastly, the
toggle calls ‘modus-themes-after-load-theme-hook’ which you can use to
add your tweaks (see *note Custom face specs using the themes’ palette:
Tweak faces (DIY).).


File: modus-themes.info,  Node: Configure options prior to loading a theme,  Next: Sample configuration for use-package,  Prev: Toggle between the themes on demand,  Up: Enable and load

3.3 Configure options prior to loading a theme
==============================================

The themes provide a unified customization framework.  This is why you
need ‘(require 'modus-themes)’.  All options must be set before loading
each theme in order to come into effect.  For example:

     ;; Set customization options to values of your choice
     (setq modus-themes-slanted-constructs t
           modus-themes-bold-constructs nil
           modus-themes-fringes nil ; {nil,'subtle,'intense}
           modus-themes-mode-line '3d ; {nil,'3d,'moody}
           modus-themes-syntax nil ; Lots of options---continue reading the manual
           modus-themes-intense-hl-line nil
           modus-themes-paren-match 'subtle-bold ; {nil,'subtle-bold,'intense,'intense-bold}
           modus-themes-links 'neutral-underline ; Lots of options---continue reading the manual
           modus-themes-no-mixed-fonts nil
           modus-themes-prompts nil ; {nil,'subtle,'intense}
           modus-themes-completions nil ; {nil,'moderate,'opinionated}
           modus-themes-region 'bg-only-no-extend ; {nil,'no-extend,'bg-only,'bg-only-no-extend}
           modus-themes-diffs nil ; {nil,'desaturated,'fg-only,'bg-only}
           modus-themes-org-blocks nil ; {nil,'grayscale,'rainbow}
           modus-themes-headings ; Lots of options---continue reading the manual
           '((1 . section)
             (2 . section-no-bold)
             (3 . rainbow-line)
             (t . rainbow-line-no-bold))
           modus-themes-variable-pitch-headings nil
           modus-themes-scale-headings nil
           modus-themes-scale-1 1.1
           modus-themes-scale-2 1.15
           modus-themes-scale-3 1.21
           modus-themes-scale-4 1.27
           modus-themes-scale-5 1.33)

     ;; Load the light theme (`modus-operandi')
     (modus-themes-load-operandi)

     ;; ;; Or load via a hook
     ;; (add-hook 'after-init-hook #'modus-themes-load-operandi)

   Note that in this example we use ‘modus-themes-load-operandi’.  Here
is what it does:

     (defun modus-themes-load-operandi ()
       "Load `modus-operandi' and disable `modus-vivendi'.
     Also run `modus-themes-after-load-theme-hook'."
       (disable-theme 'modus-vivendi)
       (load-theme 'modus-operandi t)
       (run-hooks 'modus-themes-after-load-theme-hook))

   Same principle, inverse effect, for ‘modus-themes-load-vivendi’.

   If you prefer to maintain different customization options between the
two themes, it is best you write your own functions that first set those
options and then load the themes.  The following code does exactly that
by simply differentiating the two themes on the choice of bold
constructs in code syntax (enabled for one, disabled for the other).

     (defun my-demo-modus-operandi ()
       (interactive)
       (setq modus-themes-bold-constructs t) ; ENABLE bold
       (modus-themes-load-operandi))

     (defun my-demo-modus-vivendi ()
       (interactive)
       (setq modus-themes-bold-constructs nil) ; DISABLE bold
       (modus-themes-load-vivendi))

     (defun my-demo-modus-themes-toggle ()
       (if (eq (car custom-enabled-themes) 'modus-operandi)
           (my-demo-modus-vivendi)
         (my-demo-modus-operandi)))

   Then assign ‘my-demo-modus-themes-toggle’ to a key instead of the
equivalent the themes provide.


File: modus-themes.info,  Node: Sample configuration for use-package,  Prev: Configure options prior to loading a theme,  Up: Enable and load

3.4 Sample configuration for use-package
========================================

It is common for Emacs users to rely on ‘use-package’ for declaring
package configurations in their setup.  We use this as an example:

     (use-package modus-themes
       :ensure
       :init
       ;; Add all your customizations prior to loading the themes
       (setq modus-themes-slanted-constructs t
             modus-themes-bold-constructs nil)
       :config
       ;; Load the theme of your choice
       (modus-themes-load-operandi)
       ;; ;; OR
       ;; (load-theme 'modus-operandi t)
       :bind ("<f5>" . modus-themes-toggle))

   Note that manual installations expect that the user byte compiles all
the relevant files and creates autoloads for them.  If, for whatever
reason, users wish to install the theme files manually while not doing
the requisite packaging work, then this code block must be used instead
(but please prefer the packaged format that does proper byte compilation
and autoloading).

   The following snippet is for manual installations or those that use
the themes that are shipped with Emacs:

     (use-package modus-themes
       :ensure
       :init
       ;; Add all your customizations prior to loading the themes
       (setq modus-themes-slanted-constructs t
             modus-themes-bold-constructs nil)

       ;; Enable the theme files
       (use-package modus-operandi-theme)
       (use-package modus-vivendi-theme)

       :config
       ;; Load the theme of your choice
       (modus-themes-load-operandi)
       :bind ("<f5>" . modus-themes-toggle))


File: modus-themes.info,  Node: Customization Options,  Next: Advanced customization (do-it-yourself),  Prev: Enable and load,  Up: Top

4 Customization Options
***********************

The Modus themes are highly configurable, though they should work well
without any further tweaks.  By default, all customization options are
set to ‘nil’.

   Remember that all customization options must be evaluated before
loading a theme (see *note Enable and load::).

* Menu:

* Bold constructs::              Toggle bold constructs in code
* Slanted constructs::           Toggle slanted constructs (italics) in code
* Syntax styles::                Choose the overall aesthetic of code syntax
* No mixed fonts::               Toggle mixing of font families
* Link styles::                  Choose link color intensity for the text or underline, or no underline at all
* Command prompts::              Choose among plain, subtle, or intense prompts
* Mode line::                    Choose among plain, three-dimensional, or Moody-compliant styles
* Completion UIs::               Choose among standard, moderate, or opinionated looks
* Fringes::                      Choose among invisible, subtle, or intense fringe visibility
* Line highlighting::            Toggle intense style for current line highlighting
* Matching parentheses::         Choose between various styles for matching delimiters/parentheses
* Active region::                Choose between various styles for the active region
* Diffs::                        Choose among intense, desaturated, or text-only diffs
* Org mode blocks::              Choose among plain, grayscale, or rainbow styles
* Heading styles::               Choose among several styles, also per heading level
* Scaled headings::              Toggle scaling of headings
* Headings' font::               Toggle proportionately spaced fonts in headings


File: modus-themes.info,  Node: Bold constructs,  Next: Slanted constructs,  Up: Customization Options

4.1 Option for more bold constructs
===================================

Symbol: ‘modus-themes-bold-constructs’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   The default is to use a bold typographic weight only when it is
required.

   With a non-nil value (‘t’) display several syntactic constructs in
bold weight.  This concerns keywords and other important aspects of code
syntax.  It also affects certain mode line indicators and command-line
prompts.


File: modus-themes.info,  Node: Slanted constructs,  Next: Syntax styles,  Prev: Bold constructs,  Up: Customization Options

4.2 Option for more slanted constructs
======================================

Symbol: ‘modus-themes-slanted-constructs’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   The default is to not use slanted text (italics) unless it is
absolutely necessary.

   With a non-nil value (‘t’) choose to render more faces in slanted
text.  This typically affects documentation strings and code comments.


File: modus-themes.info,  Node: Syntax styles,  Next: No mixed fonts,  Prev: Slanted constructs,  Up: Customization Options

4.3 Option for syntax highlighting
==================================

Symbol: ‘modus-themes-syntax’

   Possible values:

  1. ‘nil’ (default)
  2. ‘faint’
  3. ‘yellow-comments’
  4. ‘green-strings’
  5. ‘yellow-comments-green-strings’
  6. ‘alt-syntax’
  7. ‘alt-syntax-yellow-comments’

   The default style (nil) for code syntax highlighting is a balanced
combination of colors on the cyan-blue-magenta side of the spectrum.
There is little to no use of greens, yellows, or reds, except when it is
necessary.

   Option ‘faint’ is like the default in terms of the choice of palette
but applies desaturated color values.

   Option ‘yellow-comments’ applies a yellow tint to comments.  The rest
of the syntax is the same as the default.

   Option ‘green-strings’ replaces the blue/cyan/cold color variants in
strings with greener alternatives.  The rest of the syntax remains the
same.

   Option ‘yellow-comments-green-strings’ combines yellow comments with
green strings and the rest of the default syntax highlighting style.

   Option ‘alt-syntax’ expands the active spectrum by applying color
combinations with more contrasting hues between them.  Expect to find
more red and green variants in addition to cyan, blue, magenta.

   Option ‘alt-syntax-yellow-comments’ combines ‘alt-syntax’ with
‘yellow-comments’.


File: modus-themes.info,  Node: No mixed fonts,  Next: Link styles,  Prev: Syntax styles,  Up: Customization Options

4.4 Option for no font mixing
=============================

Symbol: ‘modus-themes-no-mixed-fonts’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   By default, the themes configure some spacing-sensitive faces, such
as Org tables and code blocks, to always inherit from the ‘fixed-pitch’
face.  This is to ensure that those constructs remain monospaced when
users opt for something like the built-in ‘M-x variable-pitch-mode’.
Otherwise the layout would appear broken.  To disable this behaviour,
set the option to ‘t’.

   Users may prefer to use another package for handling mixed typeface
configurations, rather than letting the theme do it, perhaps because a
purpose-specific package has extra functionality.  Two possible options
are ‘org-variable-pitch’ and ‘mixed-pitch’.

   *note Font configurations for Org (and others): Font configs (DIY).


File: modus-themes.info,  Node: Link styles,  Next: Command prompts,  Prev: No mixed fonts,  Up: Customization Options

4.5 Option for links
====================

Symbol: ‘modus-themes-links’

   Possible values:

  1. ‘nil’ (default)
  2. ‘faint’
  3. ‘neutral-underline’
  4. ‘faint-neutral-underline’
  5. ‘no-underline’

   The default style (nil) for links is to apply an underline and a
saturated color to the affected text.  The color of the two is the same,
which makes the link fairly prominent.

   Option ‘faint’ follows the same approach as the default, but uses
less intense colors.

   Option ‘neutral-underline’ changes the underline’s color to a subtle
gray, while retaining the default text color.

   Option ‘faint-neutral-underline’ combines a desaturated text color
with a subtle gray underline.

   Option ‘no-underline’ removes link underlines altogether, while
keeping their text color the same as the default.


File: modus-themes.info,  Node: Command prompts,  Next: Mode line,  Prev: Link styles,  Up: Customization Options

4.6 Option for command prompt styles
====================================

Symbol: ‘modus-themes-prompts’

   Possible values:

  1. ‘nil’ (default)
  2. ‘subtle’
  3. ‘intense’

   The default does not use any background for minibuffer and command
line prompts.  It relies exclusively on an accented foreground color.

   The options ‘subtle’ and ‘intense’ apply a combination of accented
background and foreground to such prompts.  The difference between the
two is that the latter has a more pronounced/noticeable effect than the
former.


File: modus-themes.info,  Node: Mode line,  Next: Completion UIs,  Prev: Command prompts,  Up: Customization Options

4.7 Option for mode line presentation
=====================================

Symbol: ‘modus-themes-mode-line’

   Possible values:

  1. ‘nil’ (default)
  2. ‘3d’
  3. ‘moody’

   The default produces a two-dimensional effect both for the active and
inactive modelines.  The differences between the two are limited to
distinct shades of grayscale values, with the active being more intense
than the inactive.

   Option ‘3d’ will make the active modeline look like a
three-dimensional rectangle.  Inactive modelines remain 2D, though they
are slightly toned down relative to the default.  This aesthetic is
virtually the same as what you get when you run Emacs without any
customizations (‘emacs -Q’ on the command line).

   While ‘moody’ removes all box effects from the modelines and applies
underline and overline properties instead.  It also tones down a bit the
inactive modelines.  This is meant to optimize things for use with the
moody package (https://github.com/tarsius/moody) (hereinafter referred
to as “Moody”), though it can work fine even without it.

   Note that Moody does not expose any faces that the themes could style
directly.  Instead it re-purposes existing ones to render its tabs and
ribbons.  As such, there may be cases where the contrast ratio falls
below the 7:1 target that the themes conform with (WCAG AAA). To hedge
against this, we configure a fallback foreground for the ‘moody’ option,
which will come into effect when the background of the modeline changes
to something less accessible, such as Moody ribbons (read the doc string
of ‘set-face-attribute’, specifically ‘:distant-foreground’).  This
fallback is activated when Emacs determines that the background and
foreground of the given construct are too close to each other in terms
of color distance.  In effect, users would need to experiment with the
variable ‘face-near-same-color-threshold’ to trigger the effect.  We
find that a value of ‘45000’ will suffice, contrary to the default
‘30000’.  Do not set the value too high, because that would have the
adverse effect of always overriding the default color (which has been
carefully designed to be highly accessible).

   Furthermore, because Moody expects an underline and overline instead
of a box style, it is advised you include this in your setup:

     (setq x-underline-at-descent-line t)


File: modus-themes.info,  Node: Completion UIs,  Next: Fringes,  Prev: Mode line,  Up: Customization Options

4.8 Option for completion framework aesthetics
==============================================

Symbol: ‘modus-themes-completions’

   Possible values:

  1. ‘nil’ (default)
  2. ‘moderate’
  3. ‘opinionated’

   This is a special option that has different effects depending on the
completion UI.  The interfaces can be grouped in two categories, based
on their default aesthetics: (i) those that only or mostly use
foreground colors for their interaction model, and (ii) those that
combine background and foreground values for some of their metaphors.
The former category encompasses Icomplete, Ido, Selectrum as well as
pattern matching styles like Orderless and Flx.  The latter covers Helm,
Ivy, and similar.

   A value of ‘nil’ will respect the metaphors of each completion
framework.

   Option ‘moderate’ applies a combination of background and foreground
that is fairly subtle.  For Icomplete and friends this constitutes a
departure from their default aesthetics, however the difference is
small.  While Helm, Ivy et al appear slightly different than their
original looks, as they are toned down a bit.

   Option ‘opinionated’ uses color combinations that refashion the
completion UI.  For the Icomplete camp this means that intense
background and foreground combinations are used: in effect their looks
emulate those of Helm, Ivy and co.  in their original style.  Whereas
the other group of packages will revert to an even more nuanced
aesthetic with some additional changes to the choice of hues.

   To appreciate the scope of this customization option, you should
spend some time with every one of the ‘nil’ (default), ‘moderate’, and
‘opinionated’ possibilities.


File: modus-themes.info,  Node: Fringes,  Next: Line highlighting,  Prev: Completion UIs,  Up: Customization Options

4.9 Option for fringe visibility
================================

Symbol: ‘modus-themes-fringes’

   Possible values:

  1. ‘nil’ (default)
  2. ‘subtle’
  3. ‘intense’

   The default is to use the same color as that of the main background,
meaning that the fringes are not obvious though they still occupy the
space given to them by ‘fringe-mode’.

   Options ‘subtle’ and ‘intense’ apply a gray background, making the
fringes visible.  The difference between the two is one of degree, as
their names imply.


File: modus-themes.info,  Node: Line highlighting,  Next: Matching parentheses,  Prev: Fringes,  Up: Customization Options

4.10 Option for line highlighting (hl-line-mode)
================================================

Symbol: ‘modus-themes-intense-hl-line’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   The default is to use a subtle gray background for ‘hl-line-mode’ and
its global equivalent.

   With a non-nil value (‘t’) use a more prominent background color
instead.

   This affects several packages that enable ‘hl-line-mode’, such as
‘elfeed’ and ‘mu4e’.


File: modus-themes.info,  Node: Matching parentheses,  Next: Active region,  Prev: Line highlighting,  Up: Customization Options

4.11 Option for parenthesis matching (show-paren-mode)
======================================================

Symbol: ‘modus-themes-paren-match’

   Possible values:

  1. ‘nil’ (default)
  2. ‘subtle-bold’
  3. ‘intense’
  4. ‘intense-bold’

   Nil means to use a subtle tinted background color for the matching
delimiters.

   Option ‘intense’ applies a saturated background color.

   Option ‘subtle-bold’ is the same as the default, but also makes use
of bold typographic weight (inherits the ‘bold’ face).

   Option ‘intense-bold’ is the same as ‘intense’, while it also uses a
bold weight.

   This customization variable affects tools such as the built-in
‘show-paren-mode’ and ‘smartparens’.


File: modus-themes.info,  Node: Active region,  Next: Diffs,  Prev: Matching parentheses,  Up: Customization Options

4.12 Option for active region
=============================

Symbol: ‘modus-themes-region’

   Possible values:

  1. ‘nil’ (default)
  2. ‘no-extend’
  3. ‘bg-only’
  4. ‘bg-only-no-extend’

   Nil means to only use a prominent gray background with a neutral
foreground.  The foreground overrides all syntax highlighting.  The
region extends to the edge of the window.

   Option ‘no-extend’ preserves the default aesthetic but prevents the
region from extending to the edge of the window.

   Option ‘bg-only’ applies a faint tinted background that is distinct
from all others used in the theme, while it does not override any
existing colors.  It extends to the edge of the window.

   Option ‘bg-only-no-extend’ is a combination of the ‘bg-only’ and
‘no-extend’ options.


File: modus-themes.info,  Node: Diffs,  Next: Org mode blocks,  Prev: Active region,  Up: Customization Options

4.13 Option for diff buffer looks
=================================

Symbol: ‘modus-themes-diffs’

   Possible values:

  1. ‘nil’ (default)
  2. ‘desaturated’
  3. ‘fg-only’

   By default the themes apply rich coloration to the output of diffs,
such as those of ‘diff-mode’, ‘ediff’, ‘smerge-mode’, and ‘magit’.
These are color combinations of an accented background and foreground so
that, for example, added lines have a pronounced green background with
an appropriate shade of green for the affected text.  Word-wise or
“refined” changes follow this pattern but use different shades of those
colors to remain distinct.

   Option ‘desaturated’ tones down all relevant color values.  It still
combines an accented background with an appropriate foreground, yet its
overall impression is fairly subtle.  Refined changes are a bit more
intense to fulfil their intended function, though still less saturated
than default.

   Option ‘fg-only’ will remove most accented backgrounds and instead
rely on color-coded text to denote changes.  For instance, added lines
use a green foreground, while their background is the same as the rest
of the buffer.  Word-wise highlights still use a background value which
is, nonetheless, more subtle than its default equivalent.

   Option ‘bg-only’ applies color-coded backgrounds but does not
override any syntax highlighting that may be present.  This makes it
suitable for use with a non-nil value for ‘diff-font-lock-syntax’ (which
is the default for ‘diff-mode’ buffers in Emacs 27 or higher).

   Concerning Magit, an extra set of tweaks are introduced for the
effect of highlighting the current diff hunk, so as to remain aligned
with the overall experience of that mode.  Expect changes that are
consistent with the overall intent of the aforementioned.  Note,
however, that the ‘bg-only’ option will not deliver the intended results
in Magit diffs because no syntax highlighting is used there (last
checked with Magit version 20201116.1057, though upstream has a plan to
eventually support such a feature—this entry shall be updated
accordingly).


File: modus-themes.info,  Node: Org mode blocks,  Next: Heading styles,  Prev: Diffs,  Up: Customization Options

4.14 Option for org-mode block styles
=====================================

Symbol: ‘modus-themes-org-blocks’

   Possible values:

  1. ‘nil’ (default)
  2. ‘grayscale’
  3. ‘rainbow’

   The default is to use the same background as the rest of the buffer
for the contents of the block.

   Option ‘grayscale’ applies a subtle neutral gray background to the
block’s contents.  It will also extend to the edge of the window the
background of the “begin” and “end” block delimiter lines (only relevant
for Emacs versions >= 27 where the ’extend’ keyword is part of the face
specifications).

   Option ‘rainbow’ uses an accented background for the contents of the
block.  The exact color will depend on the programming language and is
controlled by the ‘org-src-block-faces’ variable.  This is most suitable
for users who work on literate programming documents that mix and match
several languages.

   Note that the “rainbow” blocks may require you to also reload the
major-mode so that the colors are applied properly: use ‘M-x org-mode’
or ‘M-x org-mode-restart’ to refresh the buffer.  Or start typing in
each code block (inefficient at scale, but it still works).


File: modus-themes.info,  Node: Heading styles,  Next: Scaled headings,  Prev: Org mode blocks,  Up: Customization Options

4.15 Option for the headings’ overall style
===========================================

This is defined as an alist and, therefore, uses a different approach
than other customization options documented in this manual.

   Symbol: ‘modus-themes-headings’

   Possible values, which can be specified for each heading level
(examples further below):

   • nil (default fallback option—covers all heading levels)
   • ‘t’ (default style for a single heading, when the fallback differs)
   • ‘no-bold’
   • ‘line’
   • ‘line-no-bold’
   • ‘rainbow’
   • ‘rainbow-line’
   • ‘rainbow-line-no-bold’
   • ‘highlight’
   • ‘highlight-no-bold’
   • ‘rainbow-highlight’
   • ‘rainbow-highlight-no-bold’
   • ‘section’
   • ‘section-no-bold’
   • ‘rainbow-section’
   • ‘rainbow-section-no-bold’

   To control faces per level from 1-8, use something like this:

     (setq modus-themes-headings
           '((1 . section)
             (2 . section-no-bold)
             (3 . rainbow-line)
             (t . rainbow-line-no-bold)))

   The above uses the ‘section’ value for heading levels 1,
‘section-no-bold’ for headings 2, ‘rainbow-line’ for 3.  All other
levels fall back to ‘rainbow-line-no-bold’.

   To set a uniform value for all heading levels, use this pattern:

     ;; A given style for every heading
     (setq modus-themes-headings
           '((t . section)))

     ;; Default aesthetic for every heading
     (setq modus-themes-headings
           '())

   The default style for headings uses a fairly desaturated foreground
value in combination with bold typographic weight.  To specify this
style for a given level N, assuming you wish to have another fallback
option, just specify the value ‘t’ like this:

     (setq modus-themes-headings
           '((1 . t)
             (2 . line)
             (t . rainbow-line-no-bold)))

   A description of all other possible styles beyond the default:

   • ‘no-bold’ retains the default text color while removing the bold
     typographic weight.

   • ‘line’ is the same as the default plus an overline across the
     heading’s length.

   • ‘line-no-bold’ is the same as ‘line’ without bold weight.

   • ‘rainbow’ uses a more colorful foreground in combination with bold
     typographic weight.

   • ‘rainbow-line’ is the same as ‘rainbow’ plus an overline.

   • ‘rainbow-line-no-bold’ is the same as ‘rainbow-line’ without the
     bold weight.

   • ‘highlight’ retains the default style of a fairly desaturated
     foreground combined with a bold weight and adds to it a subtle
     accented background.

   • ‘highlight-no-bold’ is the same as ‘highlight’ without a bold
     weight.

   • ‘rainbow-highlight’ is the same as ‘highlight’ but with a more
     colorful foreground.

   • ‘rainbow-highlight-no-bold’ is the same as ‘rainbow-highlight’
     without a bold weight.

   • ‘section’ retains the default looks and adds to them both an
     overline and a slightly accented background.  It is, in effect, a
     combination of the ‘line’ and ‘highlight’ values.

   • ‘section-no-bold’ is the same as ‘section’ without a bold weight.

   • ‘rainbow-section’ is the same as ‘section’ but with a more colorful
     foreground.

   • ‘rainbow-section-no-bold’ is the same as ‘rainbow-section’ without
     a bold weight.


File: modus-themes.info,  Node: Scaled headings,  Next: Headings' font,  Prev: Heading styles,  Up: Customization Options

4.16 Option for scaled headings
===============================

Symbol: ‘modus-themes-scale-headings’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   The default is to use the same size for headings and paragraph text.

   With a non-nil value (‘t’) make headings larger in height relative to
the main text.  This is noticeable in modes like Org.

* Menu:

* Scaled heading sizes::         Specify rate of increase for scaled headings


File: modus-themes.info,  Node: Scaled heading sizes,  Up: Scaled headings

4.16.1 Control the scale of headings
------------------------------------

In addition to toggles for enabling scaled headings, users can also
specify a number of their own.

   • If it is a floating point, say, ‘1.5’, it is interpreted as a
     multiple of the base font size.  This is the recommended method.

   • If it is an integer, it is read as an absolute font height.  The
     number is basically the point size multiplied by ten.  So if you
     want it to be ‘18pt’ you must pass ‘180’.  Please understand that
     setting an absolute value is discouraged, as it will break the
     layout when you try to change font sizes with the built-in
     ‘text-scale-adjust’ command (see *note Font configurations: Font
     configs (DIY).).

   Below are the variables in their default values, using the floating
point paradigm.  The numbers are very conservative, but you are free to
change them to your liking, such as ‘1.2’, ‘1.4’, ‘1.6’, ‘1.8’, ‘2.0’—or
use a resource for finding a consistent scale:

     (setq modus-themes-scale-1 1.05
           modus-themes-scale-2 1.1
           modus-themes-scale-3 1.15
           modus-themes-scale-4 1.2
           modus-themes-scale-5 1.3)

   Note that in earlier versions of Org, scaling would only increase the
size of the heading, but not of keywords that were added to it, like
“TODO”.  The issue has been fixed upstream:
<https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/>.


File: modus-themes.info,  Node: Headings' font,  Prev: Scaled headings,  Up: Customization Options

4.17 Option for variable-pitch font in headings
===============================================

Symbol: ‘modus-themes-variable-pitch-headings’

   Possible values:

  1. ‘nil’ (default)
  2. ‘t’

   The default is to use the main font family, which typically is
monospaced.

   With a non-nil value (‘t’) apply a proportionately spaced typeface,
else “variable-pitch”, to headings (such as in Org mode).

   *note Font configurations for Org (and others): Font configs (DIY).


File: modus-themes.info,  Node: Advanced customization (do-it-yourself),  Next: Face coverage,  Prev: Customization Options,  Up: Top

5 Advanced customization (do-it-yourself)
*****************************************

Unlike the predefined customization options which follow a clear pattern
of allowing the user to quickly specify their preference, the themes
also provide a more flexible, albeit difficult, mechanism to control
things with precision (see *note Customization Options::).

   This section is of interest only to users who are prepared to
maintain their own local tweaks and who are willing to deal with any
possible incompatibilities between versioned releases of the themes.  As
such, they are labelled as “do-it-yourself” or “DIY”.

* Menu:

* Tweak faces (DIY)::            Declare your own face specs
* Font configs (DIY)::           Optimise for mixed typeface buffers
* Org user faces (DIY)::         Extend styles for org-mode keywords and priorities
* WCAG test (DIY)::              Apply the WCAG formula to color values of your choosing
* Load at time (DIY)::           Switch between the themes depending on the time of day


File: modus-themes.info,  Node: Tweak faces (DIY),  Next: Font configs (DIY),  Up: Advanced customization (do-it-yourself)

5.1 Custom face specs using the themes’ palette (DIY)
=====================================================

We already covered in previous sections how to toggle between the themes
and how to configure options prior to loading.  We also explained that
some of the functions made available to users will fire up a hook that
can be used to pass tweaks in the post-theme-load phase.

   *note Toggle between the themes: Toggle between the themes on demand.

   *note Configure options prior to loading: Configure options prior to
loading a theme.

   Now assume you wish to change a single face, say, the ‘cursor’.  And
you would like to get the standard “blue” color value of the active
Modus theme, whether it is Modus Operandi or Modus Vivendi.  To do that,
you can use the ‘modus-themes-color’ function.  It accepts a symbol that
is associated with a color in ‘modus-themes-colors-operandi’ and
‘modus-themes-colors-vivendi’.  Like this:

     (modus-themes-color 'blue)

   The function always extracts the color value of the active Modus
theme.

     (progn
       (load-theme 'modus-operandi t)
       (modus-themes-color 'blue))           ; "#0031a9" for `modus-operandi'

     (progn
       (load-theme 'modus-vivendi t)
       (modus-themes-color 'blue))           ; "#2fafff" for `modus-vivendi'

   Do ‘C-h v’ on the aforementioned variables to check all the available
symbols that can be passed to this function.

   With that granted, let us expand the example to actually change the
‘cursor’ face’s background property.  We employ the built-in function of
‘set-face-attribute’:

     (set-face-attribute 'cursor nil :background (modus-themes-color 'blue))

   If you evaluate this form, your cursor will become blue.  But if you
change themes, such as with ‘modus-themes-toggle’, your edits will be
lost, because the newly loaded theme will override the ‘:background’
attribute you had assigned to that face.

   For such changes to persist, we need to make them after loading the
theme.  So we rely on ‘modus-themes-after-load-theme-hook’, which gets
called from ‘modus-themes-load-operandi’, ‘modus-themes-load-vivendi’,
as well as the command ‘modus-themes-toggle’.  Here is a sample function
that tweaks two faces and then gets added to the hook:

     (defun my-modus-themes-custom-faces ()
       (set-face-attribute 'cursor nil :background (modus-themes-color 'blue))
       (set-face-attribute 'font-lock-type-face nil :foreground (modus-themes-color 'magenta-alt)))

     (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)

   Using this principle, it is possible to override the styles of faces
without having to find color values for each case.

   Another application is to control the precise weight for bold
constructs.  This is particularly useful if your typeface has several
variants such as “heavy”, “extrabold”, “semibold”.  All you have to do
is edit the ‘bold’ face.  For example:

     (set-face-attribute 'bold nil :weight 'semibold)

   Remember to use the custom function and hook combo we demonstrated
above.  Because the themes do not hard-wire a specific weight, this
simple form is enough to change the weight of all bold constructs
throughout the interface.

   Finally, there are cases where you want to tweak colors though wish
to apply different ones to each theme, say, a blue hue for Modus
Operandi and a shade of red for Modus Vivendi.  To this end, we provide
‘modus-themes-color-alts’ as a convenience function to save you from the
trouble of writing separate wrappers for each theme.  It still returns a
single value by querying either of ‘modus-themes-colors-operandi’ and
‘modus-themes-colors-vivendi’, only here you pass the two keys you want,
first for ‘modus-operandi’ then ‘modus-vivendi’.

   Take the previous example with the ‘cursor’ face:

     ;; Blue for `modus-operandi' and red for `modus-vivendi'
     (set-face-attribute 'cursor nil :background (modus-themes-color-alts 'blue 'red))


File: modus-themes.info,  Node: Font configs (DIY),  Next: Org user faces (DIY),  Prev: Tweak faces (DIY),  Up: Advanced customization (do-it-yourself)

5.2 Font configurations for Org and others (DIY)
================================================

The themes are designed to cope well with mixed font configurations
(*note Option for no font mixing: No mixed fonts.).

   This mostly concerns ‘org-mode’ and ‘markdown-mode’, though expect to
find it elsewhere like in ‘Info-mode’.

   In practice it means that the user can safely opt for a more
prose-friendly proportionately spaced typeface as their default, while
letting spacing-sensitive elements like tables and inline code always
use a monospaced font, by inheriting from the ‘fixed-pitch’ face.

   Users can try the built-in ‘M-x variable-pitch-mode’ to see the
effect in action.

   To make everything use your desired font families, you need to
configure the ‘variable-pitch’ (proportional spacing) and ‘fixed-pitch’
(monospaced) faces respectively.  It may also be convenient to set your
main typeface by configuring the ‘default’ face the same way.

   Put something like this in your initialization file (also consider
reading the doc string of ‘set-face-attribute’):

     ;; Main typeface
     (set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 110)

     ;; Proportionately spaced typeface
     (set-face-attribute 'variable-pitch nil :family "DejaVu Serif" :height 1.0)

     ;; Monospaced typeface
     (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 1.0)

   Note the differences in the ‘:height’ property.  The ‘default’ face
must specify an absolute value, which is the point size × 10.  So if you
want to use a font at point size ‘11’, you set the height to ‘110’.(1)
Whereas every other face must have a value that is relative to the
default, represented as a floating point (if you use an integer, then
that means an absolute height).  This is of paramount importance: it
ensures that all fonts can scale gracefully when using something like
the ‘text-scale-adjust’ command which only operates on the base font
size (i.e.  the ‘default’ face’s absolute height).

   ---------- Footnotes ----------

   (1) ‘:height’ values do not need to be rounded to multiples of ten:
the likes of ‘115’ are perfectly valid—some typefaces will change to
account for those finer increments.


File: modus-themes.info,  Node: Org user faces (DIY),  Next: WCAG test (DIY),  Prev: Font configs (DIY),  Up: Advanced customization (do-it-yourself)

5.3 Org user faces (DIY)
========================

Users of ‘org-mode’ have the option to configure various keywords and
priority cookies to better match their workflow.  User options are
‘org-todo-keyword-faces’ and ‘org-priority-faces’.

   As those are meant to be custom faces, it is futile to have the
themes guess what each user wants to use, which keywords to target, and
so on.  Instead, we can provide guidelines on how to customize things to
one’s liking with the intent of retaining the overall aesthetic of the
themes.

   Please bear in mind that the end result of those is not controlled by
the active Modus theme but by how Org maps faces to its constructs.
Editing those while ‘org-mode’ is active requires ‘M-x org-mode-restart’
for changes to take effect.

   Let us assume you wish to visually differentiate your keywords.  You
have something like this:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(D)" "CANCEL(C)")
             (sequence "MEET(m)" "|" "MET(M)")
             (sequence "STUDY(s)" "|" "STUDIED(S)")
             (sequence "WRITE(w)" "|" "WROTE(W)")))

   You could then use a variant of the following to inherit from a face
that uses the styles you want and also to preserve the properties
applied by the ‘org-todo’ face:

     (setq org-todo-keyword-faces
           '(("MEET" . '(font-lock-preprocessor-face org-todo))
             ("STUDY" . '(font-lock-variable-name-face org-todo))
             ("WRITE" . '(font-lock-type-face org-todo))))

   This will refashion the keywords you specify, while letting the other
items in ‘org-todo-keywords’ use their original styles (which are
defined in the ‘org-todo’ and ‘org-done’ faces).

   If you want back the defaults, try specifying just the ‘org-todo’
face:

     (setq org-todo-keyword-faces
           '(("MEET" . org-todo)
             ("STUDY" . org-todo)
             ("WRITE" . org-todo)))

   When you inherit from multiple faces, you need to quote the list as
shown further above.  The order is important: the last item is applied
over the previous ones.  If you do not want to blend multiple faces, you
do not need a quoted list.  A pattern of ‘keyword . face’ will suffice.

   Both approaches can be used simultaneously, as illustrated in this
configuration of the priority cookies:

     (setq org-priority-faces
           '((?A . '(org-scheduled-today org-priority))
             (?B . org-priority)
             (?C . '(shadow org-priority))))

   To find all the faces that are loaded in your current Emacs session,
use ‘M-x list-faces-display’.  Also try ‘M-x describe-variable’ and then
specify the name of each of those Org variables demonstrated above.
Their documentation strings will offer you further guidance.

   Recall that the themes let you retrieve a color from their palette.
Do it if you plan to control face attributes.

   *note Custom face specs using the themes’ palette: Tweak faces (DIY).

   *note Check color combinations: WCAG test (DIY).


File: modus-themes.info,  Node: WCAG test (DIY),  Next: Load at time (DIY),  Prev: Org user faces (DIY),  Up: Advanced customization (do-it-yourself)

5.4 Check color combinations (DIY)
==================================

The themes provide the functions ‘modus-themes-wcag-formula’ and
‘modus-themes-contrast’.  The former is a direct implementation of the
WCAG formula: <https://www.w3.org/TR/WCAG20-TECHS/G18.html>.  It gives
you the relative luminance of a color value that is expressed in
hexadecimal RGB notation.  While the latter function is just a
convenient wrapper for comparing the luminance of two colors.

   In practice, you only likely need ‘modus-themes-contrast’.  It
accepts two color values and returns their contrast ratio.  Values range
from 1 to 21 (lowest to highest).  The themes are designed to always be
equal or higher than 7 for each combination of background and foreground
that they use (this is the WCAG AAA standard—the most demanding of its
kind).

   A couple of examples (rounded numbers):

     ;; Pure white with pure green
     (modus-themes-contrast "#ffffff" "#00ff00")
     ;; => 1.37
     ;; That is an outright inaccessible combo

     ;; Pure black with pure green
     (modus-themes-contrast "#000000" "#00ff00")
     ;; => 15.3
     ;; That is is a highly accessible combo

   It does not matter which color value comes first.  The ratio is
always the same.

   If you do not wish to read all the decimal points, you can try
something like this:

     (format "%0.2f" (modus-themes-contrast "#000000" "#00ff00"))

   Bear in mind that the themes define an expanded palette in large part
because certain colors are only meant to be used in combination with
some others.  Consult the source code for relevant commentary.  And use
the resources we covered in this section in case you plan to derive your
own color combinations.


File: modus-themes.info,  Node: Load at time (DIY),  Prev: WCAG test (DIY),  Up: Advanced customization (do-it-yourself)

5.5 Load theme depending on time of day
=======================================

While we do provide ‘modus-themes-toggle’ to manually switch between the
themes, users may also set up their system to perform such a task
automatically at sunrise and sunset.

   This can be accomplished by specifying the coordinates of one’s
location using the built-in ‘solar.el’ and then configuring the
‘circadian’ library:

     (use-package solar                      ; built-in
       :config
       (setq calendar-latitude 35.17
             calendar-longitude 33.36))

     (use-package circadian                  ; you need to install this
       :ensure
       :after solar
       (setq circadian-themes '((:sunrise . modus-operandi)
                                (:sunset  . modus-vivendi)))
       (circadian-setup))


File: modus-themes.info,  Node: Face coverage,  Next: Notes for individual packages,  Prev: Advanced customization (do-it-yourself),  Up: Top

6 Face coverage
***************

The Modus themes try to provide as close to full face coverage as
possible.  This is necessary to ensure a consistently accessible reading
experience across all available interfaces.

* Menu:

* Supported packages::           Full list of covered face groups
* Indirectly covered packages::


File: modus-themes.info,  Node: Supported packages,  Next: Indirectly covered packages,  Up: Face coverage

6.1 Full support for packages or face groups
============================================

This list will always be updated to reflect the current state of the
project.  The idea is to offer an overview of the known status of all
affected face groups.  The items with an appended asterisk ‘*’ tend to
have lots of extensions, so the “full support” may not be 100% true…

   • ace-window
   • ag
   • alert
   • all-the-icons
   • annotate
   • anzu
   • apropos
   • apt-sources-list
   • artbollocks-mode
   • auctex and TeX
   • auto-dim-other-buffers
   • avy
   • awesome-tray
   • binder
   • bm
   • bongo
   • boon
   • breakpoint (provided by the built-in ‘gdb-mi.el’ library)
   • buffer-expose
   • calendar and diary
   • calfw
   • centaur-tabs
   • change-log and log-view (such as ‘vc-print-log’ and
     ‘vc-print-root-log’)
   • cider
   • circe
   • color-rg
   • column-enforce-mode
   • company-mode*
   • company-posframe
   • compilation-mode
   • completions
   • consult
   • counsel*
   • counsel-css
   • counsel-notmuch
   • counsel-org-capture-string
   • cov
   • cperl-mode
   • csv-mode
   • ctrlf
   • custom (‘M-x customize’)
   • dap-mode
   • dashboard (emacs-dashboard)
   • deadgrep
   • debbugs
   • define-word
   • deft
   • dictionary
   • diff-hl
   • diff-mode
   • dim-autoload
   • dir-treeview
   • dired
   • dired-async
   • dired-git
   • dired-git-info
   • dired-narrow
   • dired-subtree
   • diredfl
   • disk-usage
   • doom-modeline
   • dynamic-ruler
   • easy-jekyll
   • easy-kill
   • ebdb
   • ediff
   • eglot
   • el-search
   • eldoc-box
   • elfeed
   • elfeed-score
   • emms
   • enhanced-ruby-mode
   • epa
   • equake
   • erc
   • eros
   • ert
   • eshell
   • eshell-fringe-status
   • eshell-git-prompt
   • eshell-prompt-extras (epe)
   • eshell-syntax-highlighting
   • evil* (evil-mode)
   • evil-goggles
   • evil-visual-mark-mode
   • eww
   • exwm
   • eyebrowse
   • fancy-dabbrev
   • flycheck
   • flycheck-color-mode-line
   • flycheck-indicator
   • flycheck-posframe
   • flymake
   • flyspell
   • flyspell-correct
   • flx
   • freeze-it
   • frog-menu
   • focus
   • fold-this
   • font-lock (generic syntax highlighting)
   • forge
   • fountain (fountain-mode)
   • geiser
   • git-commit
   • git-gutter (and variants)
   • git-lens
   • git-rebase
   • git-timemachine
   • git-walktree
   • gnus
   • golden-ratio-scroll-screen
   • helm*
   • helm-ls-git
   • helm-switch-shell
   • helm-xref
   • helpful
   • highlight-blocks
   • highlight-defined
   • highlight-escape-sequences (‘hes-mode’)
   • highlight-indentation
   • highlight-numbers
   • highlight-symbol
   • highlight-tail
   • highlight-thing
   • hl-defined
   • hl-fill-column
   • hl-line-mode
   • hl-todo
   • hydra
   • hyperlist
   • ibuffer
   • icomplete
   • icomplete-vertical
   • ido-mode
   • iedit
   • iflipb
   • imenu-list
   • indium
   • info
   • info-colors
   • interaction-log
   • ioccur
   • isearch, occur, etc.
   • ivy*
   • ivy-posframe
   • jira (org-jira)
   • journalctl-mode
   • js2-mode
   • julia
   • jupyter
   • kaocha-runner
   • keycast
   • line numbers (‘display-line-numbers-mode’ and global variant)
   • lsp-mode
   • lsp-ui
   • macrostep
   • magit
   • magit-imerge
   • make-mode
   • man
   • markdown-mode
   • markup-faces (‘adoc-mode’)
   • mentor
   • messages
   • minibuffer-line
   • minimap
   • modeline
   • mood-line
   • moody
   • mpdel
   • mu4e
   • mu4e-conversation
   • multiple-cursors
   • neotree
   • no-emoji
   • notmuch
   • num3-mode
   • nxml-mode
   • objed
   • orderless
   • org*
   • org-journal
   • org-noter
   • org-pomodoro
   • org-recur
   • org-roam
   • org-superstar
   • org-table-sticky-header
   • org-treescope
   • origami
   • outline-mode
   • outline-minor-faces
   • package (‘M-x list-packages’)
   • page-break-lines
   • paradox
   • paren-face
   • parrot
   • pass
   • pdf-tools
   • persp-mode
   • perspective
   • phi-grep
   • phi-search
   • pkgbuild-mode
   • pomidor
   • popup
   • powerline
   • powerline-evil
   • proced
   • prodigy
   • racket-mode
   • rainbow-blocks
   • rainbow-identifiers
   • rainbow-delimiters
   • rcirc
   • regexp-builder (also known as ‘re-builder’)
   • rg (rg.el)
   • ripgrep
   • rmail
   • ruler-mode
   • sallet
   • selectrum
   • semantic
   • sesman
   • shell-script-mode
   • show-paren-mode
   • shr
   • side-notes
   • sieve-mode
   • skewer-mode
   • smart-mode-line
   • smartparens
   • smerge
   • spaceline
   • speedbar
   • spell-fu
   • stripes
   • suggest
   • switch-window
   • swiper
   • swoop
   • sx
   • symbol-overlay
   • syslog-mode
   • table (built-in table.el)
   • telephone-line
   • term
   • tomatinho
   • transient (pop-up windows such as Magit’s)
   • trashed
   • treemacs
   • tty-menu
   • tuareg
   • typescript
   • undo-tree
   • vc (built-in mode line status for version control)
   • vc-annotate (‘C-x v g’)
   • vdiff
   • vimish-fold
   • visible-mark
   • visual-regexp
   • volatile-highlights
   • vterm
   • wcheck-mode
   • web-mode
   • wgrep
   • which-function-mode
   • which-key
   • whitespace-mode
   • window-divider-mode
   • winum
   • writegood-mode
   • woman
   • xah-elisp-mode
   • xref
   • xterm-color (and ansi-colors)
   • yaml-mode
   • yasnippet
   • ztree

   Plus many other miscellaneous faces that are provided by the upstream
GNU Emacs distribution.


File: modus-themes.info,  Node: Indirectly covered packages,  Prev: Supported packages,  Up: Face coverage

6.2 Indirectly covered packages
===============================

These do not require any extra styles because they are configured to
inherit from some basic faces.  Please confirm.

   • bbdb
   • edit-indirect
   • evil-owl
   • fortran-mode
   • i3wm-config-mode
   • perl-mode
   • php-mode
   • rjsx-mode
   • swift-mode


File: modus-themes.info,  Node: Notes for individual packages,  Next: Contributing,  Prev: Face coverage,  Up: Top

7 Notes for individual packages
*******************************

This section covers information that may be of interest to users of
individual packages.

* Menu:

* Note on company-mode overlay pop-up::
* Note for ERC escaped color sequences::
* Note for powerline or spaceline::
* Note on SHR colors::
* Note for Helm grep::
* Note on vc-annotate-background-mode::


File: modus-themes.info,  Node: Note on company-mode overlay pop-up,  Next: Note for ERC escaped color sequences,  Up: Notes for individual packages

7.1 Note on company-mode overlay pop-up
=======================================

By default, the ‘company-mode’ pop-up that lists completion candidates
is drawn using an overlay.  This creates alignment issues every time it
is placed above a piece of text that has a different height than the
default.

   The solution recommended by the project’s maintainer is to use an
alternative front-end for drawing the pop-up which draws child frames
instead of overlays.(1)(2)

   ---------- Footnotes ----------

   (1) <https://github.com/company-mode/company-mode/issues/1010>

   (2) <https://github.com/tumashu/company-posframe/>


File: modus-themes.info,  Node: Note for ERC escaped color sequences,  Next: Note for powerline or spaceline,  Prev: Note on company-mode overlay pop-up,  Up: Notes for individual packages

7.2 Note for ERC escaped color sequences
========================================

The built-in IRC client ‘erc’ has the ability to colorise any text using
escape sequences that start with ‘^C’ (inserted with ‘C-q C-c’) and are
followed by a number for the foreground and background.(1)  Possible
numbers are 0-15, with the first entry being the foreground and the
second the background, separated by a comma.  Like this ‘^C1,6’.  The
minimum setup is this:

     (add-to-list 'erc-modules 'irccontrols)
     (setq erc-interpret-controls-p t
           erc-interpret-mirc-color t)

   As this allows users the chance to make arbitrary combinations, it is
impossible to guarantee a consistently high contrast ratio.  All we can
we do is provide guidance on the combinations that satisfy the
accessibility standard of the themes:

Modus Operandi
     Use foreground color 1 for all backgrounds from 2-15.  Like so:
     ‘C-q C-c1,N’ where ‘N’ is the background.

Modus Vivendi
     Use foreground color 0 for all backgrounds from 2-13.  Use
     foreground ‘1’ for backgrounds 14, 15.

   Colors 0 and 1 are white and black respectively.  So combine them
together, if you must.

   ---------- Footnotes ----------

   (1) This page explains the basics, though it is not specific to
Emacs: <https://www.mirc.com/colors.html>


File: modus-themes.info,  Node: Note for powerline or spaceline,  Next: Note on SHR colors,  Prev: Note for ERC escaped color sequences,  Up: Notes for individual packages

7.3 Note for powerline or spaceline
===================================

Both Powerline and Spaceline package users will likely need to use the
command ‘powerline-reset’ whenever they make changes to their themes
and/or modeline setup.


File: modus-themes.info,  Node: Note on SHR colors,  Next: Note for Helm grep,  Prev: Note for powerline or spaceline,  Up: Notes for individual packages

7.4 Note on SHR colors
======================

Emacs’ HTML rendering library (‘shr.el’) may need explicit configuration
to respect the theme’s colors instead of whatever specifications the
webpage provides.  Consult ‘C-h v shr-use-colors’.


File: modus-themes.info,  Node: Note for Helm grep,  Next: Note on vc-annotate-background-mode,  Prev: Note on SHR colors,  Up: Notes for individual packages

7.5 Note for Helm grep
======================

There is one face from the Helm package that is meant to highlight the
matches of a grep or grep-like command (‘ag’ or ‘ripgrep’).  It is
‘helm-grep-match’.  However, this face can only apply when the user does
not pass ‘--color=always’ as a command-line option for their command.

   Here is the docstring for that face, which is defined in the
‘helm-grep.el’ library (view a library with ‘M-x find-library’).

     Face used to highlight grep matches.  Have no effect when grep
     backend use “–color=”

   The user must either remove ‘--color’ from the flags passed to the
grep function, or explicitly use ‘--color=never’ (or equivalent).  Helm
provides user-facing customization options for controlling the grep
function’s parameters, such as ‘helm-grep-default-command’ and
‘helm-grep-git-grep-command’.

   When ‘--color=always’ is in effect, the grep output will use red text
in bold letter forms to present the matching part in the list of
candidates.  That style still meets the contrast ratio target of >= 7:1
(accessibility standard WCAG AAA), because it draws the reference to
ANSI color number 1 (red) from the already-supported array of
‘ansi-color-names-vector’.


File: modus-themes.info,  Node: Note on vc-annotate-background-mode,  Prev: Note for Helm grep,  Up: Notes for individual packages

7.6 Note on vc-annotate-background-mode
=======================================

Due to the unique way ‘vc-annotate’ (‘C-x v g’) applies colors, support
for its background mode (‘vc-annotate-background-mode’) is disabled at
the theme level.

   Normally, such a drastic measure should not belong in a theme:
assuming the user’s preferences is bad practice.  However, it has been
deemed necessary in the interest of preserving color contrast
accessibility while still supporting a useful built-in tool.

   If there actually is a way to avoid such a course of action, without
prejudice to the accessibility standard of this project, then please
report as much or send patches (see *note Contributing::).


File: modus-themes.info,  Node: Contributing,  Next: Acknowledgements,  Prev: Notes for individual packages,  Up: Top

8 Contributing
**************

This section documents the canonical sources of the themes and the ways
in which you can contribute to their ongoing development.

* Menu:

* Sources of the themes::
* Issues you can help with::
* Merge requests::               Legal considerations for code patches


File: modus-themes.info,  Node: Sources of the themes,  Next: Issues you can help with,  Up: Contributing

8.1 Sources of the themes
=========================

The ‘modus-operandi’ and ‘modus-vivendi’ themes are built into Emacs.
Currently they are in the project’s ‘master’ branch, which is tracking
the next development release target.

   The source code of the themes is available on Gitlab
(https://gitlab.com/protesilaos/modus-themes/), for the time being.  A
mirror on Github (https://github.com/protesilaos/modus-themes/) is also
on offer.

   An HTML version of this manual is provided as an extension of the
author’s personal website (https://protesilaos.com/modus-themes/) (does
not rely on any non-free code).


File: modus-themes.info,  Node: Issues you can help with,  Next: Merge requests,  Prev: Sources of the themes,  Up: Contributing

8.2 Issues you can help with
============================

A few tasks you can help with:

   • Suggest refinements to packages that are covered.
   • Report packages not covered thus far.
   • Report bugs, inconsistencies, shortcomings.
   • Help expand the documentation of covered-but-not-styled packages.
   • Suggest refinements to the color palette.
   • Help expand this document or any other piece of documentation.
   • Merge requests for code refinements.

   *note Patches require copyright assignment to the FSF: Merge
requests.

   It is preferable that your feedback includes some screenshots, GIFs,
or short videos, as well as further instructions to reproduce a given
setup.  Though this is not a requirement.

   Whatever you do, bear in mind the overarching objective of the Modus
themes: to keep a contrast ratio that is greater or equal to 7:1 between
background and foreground colors.  If a compromise is ever necessary
between aesthetics and accessibility, it shall always be made in the
interest of the latter.


File: modus-themes.info,  Node: Merge requests,  Prev: Issues you can help with,  Up: Contributing

8.3 Patches require copyright assignment to the FSF
===================================================

Code contributions are most welcome.  For any major edit (more than 15
lines, or so, in aggregate per person), you need to make a copyright
assignment to the Free Software Foundation.  This is necessary because
the themes are part of the upstream Emacs distribution: the FSF must at
all times be in a position to enforce the GNU General Public License.

   Copyright assignment is a simple process.  Check the request form
below (please adapt it accordingly).  You must write an email to the
address mentioned in the form and then wait for the FSF to send you a
legal agreement.  Sign the document and file it back to them.  This
could all happen via email and take about a week.  You are encouraged to
go through this process.  You only need to do it once.  It will allow
you to make contributions to Emacs in general.

     Please email the following information to assign@gnu.org, and we
     will send you the assignment form for your past and future changes.

     Please use your full legal name (in ASCII characters) as the subject
     line of the message.
     ----------------------------------------------------------------------
     REQUEST: SEND FORM FOR PAST AND FUTURE CHANGES

     [What is the name of the program or package you're contributing to?]

     GNU Emacs

     [Did you copy any files or text written by someone else in these changes?
     Even if that material is free software, we need to know about it.]

     Copied a few snippets from the same files I edited.  Their author,
     Protesilaos Stavrou, has already assigned copyright to the Free Software
     Foundation.

     [Do you have an employer who might have a basis to claim to own
     your changes?  Do you attend a school which might make such a claim?]


     [For the copyright registration, what country are you a citizen of?]


     [What year were you born?]


     [Please write your email address here.]


     [Please write your postal address here.]





     [Which files have you changed so far, and which new files have you written
     so far?]



File: modus-themes.info,  Node: Acknowledgements,  Next: Meta,  Prev: Contributing,  Up: Top

9 Acknowledgements
******************

The Modus themes are a collective effort.  Every bit of work matters.

Author/maintainer
     Protesilaos Stavrou.

Contributions to code or documentation
     Anders Johansson, Basil L.  Contovounesios, Eli Zaretskii, Madhavan
     Krishnan, Markus Beppler, Matthew Stevenson, Nicolas De Jaeghere,
     Shreyas Ragavan, Stefan Kangas, Vincent Murphy.

Ideas and user feedback
     Aaron Jensen, Adam Spiers, Alex Griffin, Alex Peitsinis, Alexey
     Shmalko, Alok Singh, Anders Johansson, André Alexandre Gomes, Arif
     Rezai, Basil L.  Contovounesios, Damien Cassou, Daniel Mendler,
     Dario Gjorgjevski, David Edmondson, Davor Rotim, Divan Santana,
     Gerry Agbobada, Gianluca Recchia, Hörmetjan Yiltiz, Ilja Kocken,
     Iris Garcia, Jeremy Friesen, John Haman, Len Trigg, Manuel Uberti,
     Mark Burton, Markus Beppler, Michael Goldenberg, Murilo Pereira,
     Nicolas De Jaeghere, Paul Poloskov, Pete Kazmier, Pierre
     Téchoueyres, Roman Rudakov, Ryan Phillips, Shreyas Ragavan, Simon
     Pugnet, Tassilo Horn, Thibaut Verron, Trey Merkley, Togan
     Muftuoglu, Uri Sharf, Utkarsh Singh, Vincent Foley.  As well as
     users: Ben, Emacs Contrib, Eugene, Fourchaux, Fredrik, Moesasji,
     Nick, TheBlob42, bepolymathe, dinko, doolio, fleimgruber, iSeeU,
     jixiuf, okamsn, tycho garen.

Packaging
     Dhavan Vaidya (Debian), Stefan Kangas (core Emacs), Stefan Monnier
     (GNU Elpa).

Inspiration for certain features
     Bozhidar Batsov (zenburn-theme), Fabrice Niessen (leuven-theme).

   Special thanks, in no particular order, to Manuel Uberti and Omar
Antolín Camarena for their long time contributions and insightful
commentary.


File: modus-themes.info,  Node: Meta,  Next: External projects (ports),  Prev: Acknowledgements,  Up: Top

10 Meta
*******

If you are curious about the principles that govern the development of
this project read the essay On the design of the Modus themes
(https://protesilaos.com/codelog/2020-03-17-design-modus-themes-emacs/)
(2020-03-17).

   Here are some more publications for those interested in the kind of
work that goes into this project (sometimes the commits also include
details of this sort):

   • Modus Operandi theme subtle palette review
     (https://protesilaos.com/codelog/2020-05-10-modus-operandi-palette-review/)
     (2020-05-10)
   • Modus Vivendi theme subtle palette review
     (https://protesilaos.com/codelog/2020-06-13-modus-vivendi-palette-review/)
     (2020-06-13)
   • Modus themes: new “faint syntax” option
     (https://protesilaos.com/codelog/2020-07-04-modus-themes-faint-colours/)
     (2020-07-04)
   • Modus themes: major review of “nuanced” colours
     (https://protesilaos.com/codelog/2020-07-08-modus-themes-nuanced-colours/)
     (2020-07-08)
   • Modus themes: review of blue colours
     (https://protesilaos.com/codelog/2020-09-14-modus-themes-review-blues/)
     (2020-09-14)

   And here are the canonical sources of this project’s documentation:

Manual
     <https://protesilaos.com/modus-themes>
Change Log
     <https://protesilaos.com/modus-themes-changelog>
Screenshots
     <https://protesilaos.com/modus-themes-pictures>


File: modus-themes.info,  Node: External projects (ports),  Next: GNU Free Documentation License,  Prev: Meta,  Up: Top

11 External projects (ports)
****************************

The present section documents projects that extend the scope of the
Modus themes.  The following list will be updated whenever relevant
information is brought to my attention.  If you already have or intend
to produce such a port, feel welcome to contact me
(https://protesilaos.com/contact).

Modus exporter
     This is an Elisp library written by Simon Pugnet
     (https://github.com/polaris64/modus-exporter).  Licensed under the
     terms of the GNU General Public License.  It is meant to capture
     the color values of the active Modus theme (Operandi or Vivendi)
     and output it as a valid theme for some other application.


File: modus-themes.info,  Node: GNU Free Documentation License,  Prev: External projects (ports),  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     GNU Free Documentation License
                      Version 1.3, 3 November 2008


      Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
          <https://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or noncommercially.
     Secondarily, this License preserves for the author and publisher a way
     to get credit for their work, while not being considered responsible
     for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.  It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for free
     software, because free software needs free documentation: a free
     program should come with manuals providing the same freedoms that the
     software does.  But this License is not limited to software manuals;
     it can be used for any textual work, regardless of subject matter or
     whether it is published as a printed book.  We recommend this License
     principally for works whose purpose is instruction or reference.


     1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium, that
     contains a notice placed by the copyright holder saying it can be
     distributed under the terms of this License.  Such a notice grants a
     world-wide, royalty-free license, unlimited in duration, to use that
     work under the conditions stated herein.  The "Document", below,
     refers to any such manual or work.  Any member of the public is a
     licensee, and is addressed as "you".  You accept the license if you
     copy, modify or distribute the work in a way requiring permission
     under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of
     the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could fall
     directly within that overall subject.  (Thus, if the Document is in
     part a textbook of mathematics, a Secondary Section may not explain
     any mathematics.)  The relationship could be a matter of historical
     connection with the subject or with related matters, or of legal,
     commercial, philosophical, ethical or political position regarding
     them.

     The "Invariant Sections" are certain Secondary Sections whose titles
     are designated, as being those of Invariant Sections, in the notice
     that says that the Document is released under this License.  If a
     section does not fit the above definition of Secondary then it is not
     allowed to be designated as Invariant.  The Document may contain zero
     Invariant Sections.  If the Document does not identify any Invariant
     Sections then there are none.

     The "Cover Texts" are certain short passages of text that are listed,
     as Front-Cover Texts or Back-Cover Texts, in the notice that says that
     the Document is released under this License.  A Front-Cover Text may
     be at most 5 words, and a Back-Cover Text may be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or
     for automatic translation to a variety of formats suitable for input
     to text formatters.  A copy made in an otherwise Transparent file
     format whose markup, or absence of markup, has been arranged to thwart
     or discourage subsequent modification by readers is not Transparent.
     An image format is not Transparent if used for any substantial amount
     of text.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format, SGML
     or XML using a publicly available DTD, and standard-conforming simple
     HTML, PostScript or PDF designed for human modification.  Examples of
     transparent image formats include PNG, XCF and JPG.  Opaque formats
     include proprietary formats that can be read and edited only by
     proprietary word processors, SGML or XML for which the DTD and/or
     processing tools are not generally available, and the
     machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the material
     this License requires to appear in the title page.  For works in
     formats which do not have any title page as such, "Title Page" means
     the text near the most prominent appearance of the work's title,
     preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies of
     the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document whose
     title either is precisely XYZ or contains XYZ in parentheses following
     text that translates XYZ in another language.  (Here XYZ stands for a
     specific section name mentioned below, such as "Acknowledgements",
     "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
     of such a section when you modify the Document means that it remains a
     section "Entitled XYZ" according to this definition.

     The Document may include Warranty Disclaimers next to the notice which
     states that this License applies to the Document.  These Warranty
     Disclaimers are considered to be included by reference in this
     License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and has
     no effect on the meaning of this License.

     2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License applies
     to the Document are reproduced in all copies, and that you add no
     other conditions whatsoever to those of this License.  You may not use
     technical measures to obstruct or control the reading or further
     copying of the copies you make or distribute.  However, you may accept
     compensation in exchange for copies.  If you distribute a large enough
     number of copies you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and
     you may publicly display copies.


     3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly have
     printed covers) of the Document, numbering more than 100, and the
     Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover
     Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
     the back cover.  Both covers must also clearly and legibly identify
     you as the publisher of these copies.  The front cover must present
     the full title with all words of the title equally prominent and
     visible.  You may add other material on the covers in addition.
     Copying with changes limited to the covers, as long as they preserve
     the title of the Document and satisfy these conditions, can be treated
     as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto adjacent
     pages.

     If you publish or distribute Opaque copies of the Document numbering
     more than 100, you must either include a machine-readable Transparent
     copy along with each Opaque copy, or state in or with each Opaque copy
     a computer-network location from which the general network-using
     public has access to download using public-standard network protocols
     a complete Transparent copy of the Document, free of added material.
     If you use the latter option, you must take reasonably prudent steps,
     when you begin distribution of Opaque copies in quantity, to ensure
     that this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you distribute an
     Opaque copy (directly or through your agents or retailers) of that
     edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to
     give them a chance to provide you with an updated version of the
     Document.


     4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under
     the conditions of sections 2 and 3 above, provided that you release
     the Modified Version under precisely this License, with the Modified
     Version filling the role of the Document, thus licensing distribution
     and modification of the Modified Version to whoever possesses a copy
     of it.  In addition, you must do these things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions
        (which should, if there were any, be listed in the History section
        of the Document).  You may use the same title as a previous version
        if the original publisher of that version gives permission.
     B. List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
     C. State on the Title page the name of the publisher of the
        Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
     G. Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
     J. Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions
        it was based on.  These may be placed in the "History" section.
        You may omit a network location for a work that was published at
        least four years before the Document itself, or if the original
        publisher of the version it refers to gives permission.
     K. For any section Entitled "Acknowledgements" or "Dedications",
        Preserve the Title of the section, and preserve in the section all
        the substance and tone of each of the contributor acknowledgements
        and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles.  Section numbers
        or the equivalent are not considered part of the section titles.
     M. Delete any section Entitled "Endorsements".  Such a section
        may not be included in the Modified Version.
     N. Do not retitle any existing section to be Entitled "Endorsements"
        or to conflict in title with any Invariant Section.
     O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no material
     copied from the Document, you may at your option designate some or all
     of these sections as invariant.  To do this, add their titles to the
     list of Invariant Sections in the Modified Version's license notice.
     These titles must be distinct from any other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of a
     standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list
     of Cover Texts in the Modified Version.  Only one passage of
     Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document already
     includes a cover text for the same cover, previously added by you or
     by arrangement made by the same entity you are acting on behalf of,
     you may not add another; but you may replace the old one, on explicit
     permission from the previous publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this License
     give permission to use their names for publicity for or to assert or
     imply endorsement of any Modified Version.


     5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified
     versions, provided that you include in the combination all of the
     Invariant Sections of all of the original documents, unmodified, and
     list them all as Invariant Sections of your combined work in its
     license notice, and that you preserve all their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name but
     different contents, make the title of each such section unique by
     adding at the end of it, in parentheses, the name of the original
     author or publisher of that section if known, or else a unique number.
     Make the same adjustment to the section titles in the list of
     Invariant Sections in the license notice of the combined work.

     In the combination, you must combine any sections Entitled "History"
     in the various original documents, forming one section Entitled
     "History"; likewise combine any sections Entitled "Acknowledgements",
     and any sections Entitled "Dedications".  You must delete all sections
     Entitled "Endorsements".


     6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the rules
     of this License for verbatim copying of each of the documents in all
     other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert a
     copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.


     7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate
     and independent documents or works, in or on a volume of a storage or
     distribution medium, is called an "aggregate" if the copyright
     resulting from the compilation is not used to limit the legal rights
     of the compilation's users beyond what the individual works permit.
     When the Document is included in an aggregate, this License does not
     apply to the other works in the aggregate which are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half of
     the entire aggregate, the Document's Cover Texts may be placed on
     covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic form.
     Otherwise they must appear on printed covers that bracket the whole
     aggregate.


     8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section 4.
     Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also include
     the original English version of this License and the original versions
     of those notices and disclaimers.  In case of a disagreement between
     the translation and the original version of this License or a notice
     or disclaimer, the original version will prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to Preserve
     its Title (section 1) will typically require changing the actual
     title.


     9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void, and
     will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your license
     from a particular copyright holder is reinstated (a) provisionally,
     unless and until the copyright holder explicitly and finally
     terminates your license, and (b) permanently, if the copyright holder
     fails to notify you of the violation by some reasonable means prior to
     60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

     Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, receipt of a copy of some or all of the same material does
     not give you any rights to use it.


     10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the
     GNU Free Documentation License from time to time.  Such new versions
     will be similar in spirit to the present version, but may differ in
     detail to address new problems or concerns.  See
     https://www.gnu.org/licenses/.

     Each version of the License is given a distinguishing version number.
     If the Document specifies that a particular numbered version of this
     License "or any later version" applies to it, you have the option of
     following the terms and conditions either of that specified version or
     of any later version that has been published (not as a draft) by the
     Free Software Foundation.  If the Document does not specify a version
     number of this License, you may choose any version ever published (not
     as a draft) by the Free Software Foundation.  If the Document
     specifies that a proxy can decide which future versions of this
     License can be used, that proxy's public statement of acceptance of a
     version permanently authorizes you to choose that version for the
     Document.

     11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.  A
     "Massive Multiauthor Collaboration" (or "MMC") contained in the site
     means any set of copyrightable works thus published on the MMC site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or in
     part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this License
     somewhere other than this MMC, and subsequently incorporated in whole or
     in part into the MMC, (1) had no cover texts or invariant sections, and
     (2) were thus incorporated prior to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the site
     under CC-BY-SA on the same site at any time before August 1, 2009,
     provided the MMC is eligible for relicensing.


     ADDENDUM: How to use this License for your documents

     To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and
     license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.3
         or any later version published by the Free Software Foundation;
         with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

     If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
     replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

     If you have Invariant Sections without Cover Texts, or some other
     combination of the three, merge those two alternatives to suit the
     situation.

     If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License,
     to permit their use in free software.



Tag Table:
Node: Top232
Node: Overview4308
Node: How do the themes look like5578
Node: Learn about the latest changes6086
Node: Installation6468
Node: Install from the archives6916
Node: Install on GNU/Linux7578
Node: Debian 11 Bullseye8026
Node: GNU Guix8435
Node: Enable and load8658
Node: Load automatically9450
Node: Toggle between the themes on demand10267
Node: Configure options prior to loading a theme11225
Node: Sample configuration for use-package14781
Node: Customization Options16525
Node: Bold constructs18415
Node: Slanted constructs19004
Node: Syntax styles19551
Node: No mixed fonts21066
Node: Link styles22077
Node: Command prompts23056
Node: Mode line23739
Node: Completion UIs26262
Node: Fringes28094
Node: Line highlighting28754
Node: Matching parentheses29369
Node: Active region30252
Node: Diffs31188
Node: Org mode blocks33460
Node: Heading styles34800
Node: Scaled headings38466
Node: Scaled heading sizes39052
Node: Headings' font40626
Node: Advanced customization (do-it-yourself)41226
Node: Tweak faces (DIY)42390
Node: Font configs (DIY)46596
Ref: Font configs (DIY)-Footnote-148880
Node: Org user faces (DIY)49067
Node: WCAG test (DIY)52272
Node: Load at time (DIY)54161
Node: Face coverage55114
Node: Supported packages55584
Node: Indirectly covered packages61743
Node: Notes for individual packages62198
Node: Note on company-mode overlay pop-up62684
Ref: Note on company-mode overlay pop-up-Footnote-163348
Ref: Note on company-mode overlay pop-up-Footnote-263415
Node: Note for ERC escaped color sequences63470
Ref: Note for ERC escaped color sequences-Footnote-164903
Node: Note for powerline or spaceline65013
Node: Note on SHR colors65429
Node: Note for Helm grep65839
Node: Note on vc-annotate-background-mode67284
Node: Contributing68136
Node: Sources of the themes68555
Node: Issues you can help with69296
Node: Merge requests70477
Node: Acknowledgements72739
Node: Meta74517
Node: External projects (ports)76023
Node: GNU Free Documentation License76845

End Tag Table


Local Variables:
coding: utf-8
End:
